##http://stats.stackexchange.com/questions/78828/is-there-a-difference-between-controlling-for-and-ignoring-other-variables-i
##http://stats.stackexchange.com/questions/78828/is-there-a-difference-between-controlling-for-and-ignoring-other-variables-i

set.seed(0)
library(scatterplot3d)

x1 <- c(rnorm(10,3,1),rnorm(10,5,1),rnorm(10,7,1))

x2 <- rep(c(1:3),each=10)

y1 <- 2  -0.8 * x1[1:10] + 8 * x2[1:10] +rnorm(10)
y2 <- 6  -0.8 * x1[11:20] + 8 * x2[11:20] +rnorm(10)
y3 <- 8  -0.8 * x1[21:30] + 8 * x2[21:30] +rnorm(10)
y <- c(y1,y2,y3)



library(lattice)
xyplot(y ~ x1, groups = x2, pch=19,
       
       panel = function(x, y,...) {
         panel.xyplot(x, y,...);
         panel.abline(lm(y ~ x1));
         panel.abline(lm(y[1:10] ~ x1[1:10]),lty=2,col='blue');
         panel.abline(lm(y[11:20] ~ x1[11:20]),lty=2,col='magenta');
         panel.abline(lm(y[21:30] ~ x1[21:30]),lty=2,col='green')
       })


## Linear regression IGNORING x2:

lm(y ~ x1 + x2)

#Coefficients:
#(Intercept)           x1  
#    0.7752          3.3151  


## Linear regression CONTROLLING for x2:

lm(y ~ x1 + x2)

#Coefficients:
#(Intercept)           x1           x2  
#    -0.8767      -0.5991      10.7274 

## What if we used a MIXED EFFECTS MODEL:

require(lme4)

#coef(lmer(y ~ x1 + (1|x2)))
#$x2
#  (Intercept)         x1
#1    10.32812 -0.9185763
#2    23.17116 -0.9185763
#3    33.08425 -0.9185763

## What about varying intercepts:

coef(lmer(y ~ x1|x2))

#$x2
#          x1 (Intercept)
#1 -1.1541831    10.95850
#2 -0.6596263    21.69921
#3 -0.3224040    29.02296

## Which one is best?

fit1 <- lm(y ~ x1)
fit2 <- lm(y ~ x1 + x2)
fit3 <- lmer(y ~ x1 + (1|x2))
fit4 <- lmer(y ~ x1|x2)
AIC(fit1, fit2, fit3, fit4)

#     df      AIC
#fit1  3 181.3116
#fit2  4 101.5556 So an OLS y ~ x1 + x2 is best!!
#fit3  4 110.4370
#fit4  5 118.5242

## This is the case because x1 and x2 are CORRELATED:

#cor(x1,x2)
#[1] 0.8682812
plot(x1,x2, pch=16, col='firebrick')

## However, the lines created with the random-effects coefficients look remarkable accurate:

xyplot(y ~ x1, groups = x2, pch=19,
       panel = function(x, y,...) {
         panel.xyplot(x, y,...);
         panel.abline(a=coef(fit4)$x2[1,2], b=coef(fit4)$x2[1,1],lty=2,col='blue');
         panel.abline(a=coef(fit4)$x2[2,2], b=coef(fit4)$x2[2,1],lty=2,col='magenta');
         panel.abline(a=coef(fit4)$x2[3,2], b=coef(fit4)$x2[3,1],lty=2,col='green')
       })


## ... although the plane created by the bivariate OLS doesn't look to bad either:

library(scatterplot3d)
plot1 <- scatterplot3d(x1,x2,y, type='h', pch=16,
                       highlight.3d=T)
plot1$plane3d(fit2)
