## From Douglas Bates documents 'lmer' and 'Bates lecture lmer'

require(nlme)
require(lme4)
head(Rail)

## The model is yij = β + bi + epsilon ij
## bi∼N(0,σ2b), epsilonij∼N(0,σ2).
## σ2b is between rail variability, and σ2 within rail variability.

## Compare it to a simpler model without the classification factor when modeling group data
## corresponding to yij = β + epsilon ij:

fm1Rail.lm <- lm( travel ~ 1, data = Rail )
summary(fm1Rail.lm)

## The intercept is the mean of all the rails.

## The residual standard error of the first model is identical to the standard deviation:

sd(Rail$travel)

## Using a fixed-effect model for the classification or groups we get a
## yij = βi + ij formulation, where every rail has its mean:

fm2Rail.lm <- lm( travel ~ Rail - 1, data = Rail )
summary(fm2Rail.lm)

## Notice that the residual standard error in the last paragraph is 4, which is
## six times less than in the prior model, 23.65.

## This model accounts for the groups, BUT it only models the specific sample of rails
## used in the experiment, AND doesn't estimate the varibility BETWEEN rails. Further
## the number of parameters in the model increases linearly with the number of rails.

## The random effect models considers the rail effect to be randomly distributed around
## the population mean.
## The model is yij = β + bi + ij ,
## where β is the mean travel time across the population of rails being sam-
## pled, bi is a random variable representing the deviation from the population
## mean of the mean travel time for the ith rail,

fm1Rail.lme <- lme(travel ~ 1, data = Rail, random = ~ 1 | Rail)
fm1Rail.lmeML <- update( fm1Rail.lme, method = "ML" )

fm1Rail.lme
fm1Rail.lmeML

## Notice that the residual standard error are the same in the three last models.









=============================================================================================================================


#####################
#MIXED EFFECTS MODEL:
#####################


##################
## The Z matrix ##
##################

## n is the number of observations
## q is the number of random effects (plots)
## Z Matrix is n x q

require(MASS)

data(Traffic)
head(Traffic)
Traffic$year <- as.factor(Traffic$year)
Z <- model.matrix(~ year - 1, data = Traffic)
Z[c(1, 2, 184), ]
transp_Z <- with(Traffic, as(year, "sparseMatrix"))


require(lme4)
head(Dyestuff)

fm1 <- lmer(Yield ~ 1 + (1 | Batch), Dyestuff)

(S <- getME(fm1,"Lambdat"))


##############################################
# As for the Sigma matrix = TSS'T'
# T is q x q lower triangular
# S is q x q diagonal scale matrix
# Hence Sigma is qxq
###############################################

#S
# 6 x 6 diagonal matrix of class "ddiMatrix"
#         [,1]    [,2]    [,3]    [,4]    [,5]    [,6]
#[1,] 0.84823       .       .       .       .       .
#[2,]       . 0.84823       .       .       .       .
#[3,]       .       . 0.84823       .       .       .
#[4,]       .       .       . 0.84823       .       .
#[5,]       .       .       .       . 0.84823       .
#[6,]       .       .       .       .       . 0.84823



# T
#6 x 6 sparse Matrix of class "dtCMatrix"

T <- diag(1,6)

# [1,] 1 . . . . .
# [2,] . 1 . . . .
# [3,] . . 1 . . .
# [4,] . . . 1 . .
# [5,] . . . . 1 .
# [6,] . . . . . 1


# Sigma

(Sigma <- crossprod(getME(fm1,"Lambdat")))

# Other extractions:

getME(fm1,"Z")
getME(fm1,"S")
getME(fm1,"theta")

#or

tcrossprod(T%*%S)

#or

S %*% t(S)

## 0.8483238^2 = 0.7196533

image(Sigma)

##################
## The X matrix ##
##################

## p is the number of fixed effects
## X matrix is n x p

#####################
## The beta vector ##
#####################

## is p x 1


## Another example with sleepstudy:

library(lattice)
print(xyplot(Reaction ~ Days | Subject, sleepstudy, aspect = "xy",
             layout = c(6,3), type = c("g", "p", "r"),
             index.cond = function(x,y) coef(lm(y ~ x))[1],
             xlab = "Days of sleep deprivation",
             ylab = "Average reaction time (ms)"))

fit <- lmer(Reaction ~ 1 + (1 | Subject), sleepstudy)
str(sleepstudy$Subject)
T <- diag(1,18)
S <- T * getME(fit,"theta")
Sigma <- S %*% t(S)
# or with built-in function:
(Sigma <- crossprod(getME(fit,"Lambdat")))

str(sleepstudy)
fit2<-lmer(Reaction~Days+(Days|Subject), sleepstudy)
(Sigma <- crossprod(getME(fit2,"Lambdat")))
